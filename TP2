#include <stdio.h>
#include <stdlib.h>

// Function to dynamically allocate memory for a string and read it
char *LoadString(int N) {
    char *string = (char *)malloc(N * sizeof(char)); // Dynamic memory allocation
    if (string == NULL) {
        printf("Memory allocation error.\n"); // Exit if memory allocation fails
    }
    printf("Please enter the string:\n");
    scanf(" %[^\n]", string); // Read the string (including spaces)
    return string;
}

// Function to calculate the length of the string manually
int StringLength(char *str) {
    int len = 0;
    while (str[len] != '\0') {
        len++;
    }
    return len;
}

// Procedure to copy the string into a character array manually
void CopyString(char *src, char dest[]) {
    int i = 0;
    while (src[i] != '\0') {
        dest[i] = src[i]; // Copy each character
        i++;
    }
    dest[i] = '\0'; // Null-terminate the copied string
}

// Procedure to reverse the content of a character array into another
void ReverseArray(char original[], char reversed[], int length) {
    for (int i = 0; i < length; i++) {
        reversed[i] = original[length - 1 - i]; // Reverse the array
    }
    reversed[length] = '\0'; // Null-terminate the reversed string
}

// Procedure to display the content of a character array
void DisplayArray(char array[], int length) {
    printf("%s\n", array); // Display the array as a string
}

// Main function
int main() {
    char *str; 
    int n;
    
    // Prompt the user for the maximum size of the string
    printf("Please enter the maximum size of the string:\n");
    scanf("%d", &n);
    
    str = LoadString(n); // Allocate memory and read the string
    int length = StringLength(str); // Get the length of the string
    
    char original[length + 1], reversed[length + 1]; // Arrays to hold the string and its reverse
    
    CopyString(str, original); // Load the string into the array
    DisplayArray(original, length); // Display the original string
    
    ReverseArray(original, reversed, length); // Reverse the string into another array
    DisplayArray(reversed, length); // Display the reversed string
    
    free(str); // Free the dynamically allocated memory
    return 0;
}
